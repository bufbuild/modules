// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.confluent.v1;

import "google/protobuf/descriptor.proto";

// Subject declares a unique mapping between a protobuf Message and a subject
// name with an instance of the Confluent Schema Registry integration in the
// BSR.
//
// For more details on the Confluent Schema Registry model, see:
// https://docs.confluent.io/platform/current/schema-registry/fundamentals/index.html#schemas-subjects-and-topics
message Subject {
  // instance_name is the user-specified name for the Confluent Schema Registry
  // instance within the BSR. Instances are managed within Admin Settings in the BSR.
  string instance_name = 1;
  // name is the subject's name, determined by the subject naming strategy. See
  // the Confluent documentation for more details:
  // https://docs.confluent.io/platform/current/schema-registry/fundamentals/serdes-develop/index.html#subject-name-strategy
  //
  // The default subject name strategy is TopicNameStrategy, which appends
  // either '-key' or '-value' to a Kafka topic's name to create the subject
  // name.
  string name = 2;
}

extend google.protobuf.MessageOptions {
  // subject identifies Confluent Schema Registry subjects whose schema is
  // defined by the containing message.
  repeated Subject subject = 1158;
}
