/*
Copyright 2019 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file contains the service definition for making management API
// calls to VtTablet.

syntax = "proto3";
option go_package = "github.com/planetscale/vitess-types/gen/vitess/tabletmanagerservice/v17;tabletmanagerservicev17";

package vitess.tabletmanagerservice.v17;

import "vitess/tabletmanagerdata/v17/tabletmanagerdata.proto";

// TabletManager is a service definition for tabletmanagerdata.TabletManager.
service TabletManager {
  //
  // Various read-only methods
  //

  // Ping returns the input payload
  rpc Ping(vitess.tabletmanagerdata.v17.PingRequest) returns (vitess.tabletmanagerdata.v17.PingResponse) {};

  // Sleep sleeps for the provided duration
  rpc Sleep(vitess.tabletmanagerdata.v17.SleepRequest) returns (vitess.tabletmanagerdata.v17.SleepResponse) {};

  // ExecuteHook executes the hook remotely
  rpc ExecuteHook(vitess.tabletmanagerdata.v17.ExecuteHookRequest) returns (vitess.tabletmanagerdata.v17.ExecuteHookResponse) {};

  // GetSchema asks the tablet for its schema
  rpc GetSchema(vitess.tabletmanagerdata.v17.GetSchemaRequest) returns (vitess.tabletmanagerdata.v17.GetSchemaResponse) {};

  // GetPermissions asks the tablet for its permissions
  rpc GetPermissions(vitess.tabletmanagerdata.v17.GetPermissionsRequest) returns (vitess.tabletmanagerdata.v17.GetPermissionsResponse) {};

  //
  // Various read-write methods
  //

  rpc SetReadOnly(vitess.tabletmanagerdata.v17.SetReadOnlyRequest) returns (vitess.tabletmanagerdata.v17.SetReadOnlyResponse) {};

  rpc SetReadWrite(vitess.tabletmanagerdata.v17.SetReadWriteRequest) returns (vitess.tabletmanagerdata.v17.SetReadWriteResponse) {};

  // ChangeType asks the remote tablet to change its type
  rpc ChangeType(vitess.tabletmanagerdata.v17.ChangeTypeRequest) returns (vitess.tabletmanagerdata.v17.ChangeTypeResponse) {};

  rpc RefreshState(vitess.tabletmanagerdata.v17.RefreshStateRequest) returns (vitess.tabletmanagerdata.v17.RefreshStateResponse) {};

  rpc RunHealthCheck(vitess.tabletmanagerdata.v17.RunHealthCheckRequest) returns (vitess.tabletmanagerdata.v17.RunHealthCheckResponse) {};

  rpc ReloadSchema(vitess.tabletmanagerdata.v17.ReloadSchemaRequest) returns (vitess.tabletmanagerdata.v17.ReloadSchemaResponse) {};

  rpc PreflightSchema(vitess.tabletmanagerdata.v17.PreflightSchemaRequest) returns (vitess.tabletmanagerdata.v17.PreflightSchemaResponse) {};

  rpc ApplySchema(vitess.tabletmanagerdata.v17.ApplySchemaRequest) returns (vitess.tabletmanagerdata.v17.ApplySchemaResponse) {};

  rpc LockTables(vitess.tabletmanagerdata.v17.LockTablesRequest) returns (vitess.tabletmanagerdata.v17.LockTablesResponse) {};

  rpc UnlockTables(vitess.tabletmanagerdata.v17.UnlockTablesRequest) returns (vitess.tabletmanagerdata.v17.UnlockTablesResponse) {};

  rpc ExecuteQuery(vitess.tabletmanagerdata.v17.ExecuteQueryRequest) returns (vitess.tabletmanagerdata.v17.ExecuteQueryResponse) {};

  rpc ExecuteFetchAsDba(vitess.tabletmanagerdata.v17.ExecuteFetchAsDbaRequest) returns (vitess.tabletmanagerdata.v17.ExecuteFetchAsDbaResponse) {};

  rpc ExecuteFetchAsAllPrivs(vitess.tabletmanagerdata.v17.ExecuteFetchAsAllPrivsRequest) returns (vitess.tabletmanagerdata.v17.ExecuteFetchAsAllPrivsResponse) {};

  rpc ExecuteFetchAsApp(vitess.tabletmanagerdata.v17.ExecuteFetchAsAppRequest) returns (vitess.tabletmanagerdata.v17.ExecuteFetchAsAppResponse) {};

  //
  // Replication related methods
  //

  // ReplicationStatus returns the current replication status.
  rpc ReplicationStatus(vitess.tabletmanagerdata.v17.ReplicationStatusRequest) returns (vitess.tabletmanagerdata.v17.ReplicationStatusResponse) {};

  // PrimaryStatus returns the current primary status.
  rpc PrimaryStatus(vitess.tabletmanagerdata.v17.PrimaryStatusRequest) returns (vitess.tabletmanagerdata.v17.PrimaryStatusResponse) {};

  // PrimaryPosition returns the current primary position
  rpc PrimaryPosition(vitess.tabletmanagerdata.v17.PrimaryPositionRequest) returns (vitess.tabletmanagerdata.v17.PrimaryPositionResponse) {};

  // WaitForPosition waits for the position to be reached
  rpc WaitForPosition(vitess.tabletmanagerdata.v17.WaitForPositionRequest) returns (vitess.tabletmanagerdata.v17.WaitForPositionResponse) {};

  // StopReplication makes mysql stop its replication
  rpc StopReplication(vitess.tabletmanagerdata.v17.StopReplicationRequest) returns (vitess.tabletmanagerdata.v17.StopReplicationResponse) {};

  // StopReplicationMinimum stops the mysql replication after it reaches
  // the provided minimum point
  rpc StopReplicationMinimum(vitess.tabletmanagerdata.v17.StopReplicationMinimumRequest) returns (vitess.tabletmanagerdata.v17.StopReplicationMinimumResponse) {};

  // StartReplication starts the mysql replication
  rpc StartReplication(vitess.tabletmanagerdata.v17.StartReplicationRequest) returns (vitess.tabletmanagerdata.v17.StartReplicationResponse) {};

  // StartReplicationUnitAfter starts the mysql replication until and including
  // the provided position
  rpc StartReplicationUntilAfter(vitess.tabletmanagerdata.v17.StartReplicationUntilAfterRequest) returns (vitess.tabletmanagerdata.v17.StartReplicationUntilAfterResponse) {};

  // GetReplicas asks for the list of mysql replicas
  rpc GetReplicas(vitess.tabletmanagerdata.v17.GetReplicasRequest) returns (vitess.tabletmanagerdata.v17.GetReplicasResponse) {};

  // VReplication API
  rpc VReplicationExec(vitess.tabletmanagerdata.v17.VReplicationExecRequest) returns(vitess.tabletmanagerdata.v17.VReplicationExecResponse) {};
  rpc VReplicationWaitForPos(vitess.tabletmanagerdata.v17.VReplicationWaitForPosRequest) returns(vitess.tabletmanagerdata.v17.VReplicationWaitForPosResponse) {};
  rpc UpdateVRWorkflow(vitess.tabletmanagerdata.v17.UpdateVRWorkflowRequest) returns(vitess.tabletmanagerdata.v17.UpdateVRWorkflowResponse) {};

  // VDiff API
  rpc VDiff(vitess.tabletmanagerdata.v17.VDiffRequest) returns(vitess.tabletmanagerdata.v17.VDiffResponse) {};

  //
  // Reparenting related functions
  //

  // ResetReplication makes the target not replicating
  rpc ResetReplication(vitess.tabletmanagerdata.v17.ResetReplicationRequest) returns (vitess.tabletmanagerdata.v17.ResetReplicationResponse) {};

  // InitPrimary initializes the tablet as a primary
  rpc InitPrimary(vitess.tabletmanagerdata.v17.InitPrimaryRequest) returns (vitess.tabletmanagerdata.v17.InitPrimaryResponse) {};

  // PopulateReparentJournal tells the tablet to add an entry to its
  // reparent journal
  rpc PopulateReparentJournal(vitess.tabletmanagerdata.v17.PopulateReparentJournalRequest) returns (vitess.tabletmanagerdata.v17.PopulateReparentJournalResponse) {};

  // InitReplica tells the tablet to reparent to the primary unconditionally
  rpc InitReplica(vitess.tabletmanagerdata.v17.InitReplicaRequest) returns (vitess.tabletmanagerdata.v17.InitReplicaResponse) {};

  // DemotePrimary tells the soon-to-be-former primary it's gonna change
  rpc DemotePrimary(vitess.tabletmanagerdata.v17.DemotePrimaryRequest) returns (vitess.tabletmanagerdata.v17.DemotePrimaryResponse) {};

  // UndoDemotePrimary reverts all changes made by DemotePrimary
  rpc UndoDemotePrimary(vitess.tabletmanagerdata.v17.UndoDemotePrimaryRequest) returns (vitess.tabletmanagerdata.v17.UndoDemotePrimaryResponse) {};

  // ReplicaWasPromoted tells the remote tablet it is now the primary
  rpc ReplicaWasPromoted(vitess.tabletmanagerdata.v17.ReplicaWasPromotedRequest) returns (vitess.tabletmanagerdata.v17.ReplicaWasPromotedResponse) {};

  // ResetReplicationParameters resets the replica replication parameters
  rpc ResetReplicationParameters(vitess.tabletmanagerdata.v17.ResetReplicationParametersRequest) returns (vitess.tabletmanagerdata.v17.ResetReplicationParametersResponse) {};

  // FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
  rpc FullStatus(vitess.tabletmanagerdata.v17.FullStatusRequest) returns (vitess.tabletmanagerdata.v17.FullStatusResponse) {};

  // SetReplicationSource tells the replica to reparent
  rpc SetReplicationSource(vitess.tabletmanagerdata.v17.SetReplicationSourceRequest) returns (vitess.tabletmanagerdata.v17.SetReplicationSourceResponse) {};

  // ReplicaWasRestarted tells the remote tablet its primary has changed
  rpc ReplicaWasRestarted(vitess.tabletmanagerdata.v17.ReplicaWasRestartedRequest) returns (vitess.tabletmanagerdata.v17.ReplicaWasRestartedResponse) {};

  // StopReplicationAndGetStatus stops MySQL replication, and returns the
  // replication status
  rpc StopReplicationAndGetStatus(vitess.tabletmanagerdata.v17.StopReplicationAndGetStatusRequest) returns (vitess.tabletmanagerdata.v17.StopReplicationAndGetStatusResponse) {};

  // PromoteReplica makes the replica the new primary
  rpc PromoteReplica(vitess.tabletmanagerdata.v17.PromoteReplicaRequest) returns (vitess.tabletmanagerdata.v17.PromoteReplicaResponse) {};

  //
  // Backup related methods
  //

  rpc Backup(vitess.tabletmanagerdata.v17.BackupRequest) returns (stream vitess.tabletmanagerdata.v17.BackupResponse) {};

  // RestoreFromBackup deletes all local data and restores it from the latest backup.
  rpc RestoreFromBackup(vitess.tabletmanagerdata.v17.RestoreFromBackupRequest) returns (stream vitess.tabletmanagerdata.v17.RestoreFromBackupResponse) {};

}
