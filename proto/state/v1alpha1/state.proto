// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package state.v1alpha1;

import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/managed-modules/protocolbuffers/go/state/v1alpha1";

// GlobalState is a sorted array managed modules, each one with the latest
// reference from its local array of references. This is kept updated in a
// global state file at the root sync directory.
message GlobalState {
  option (buf.validate.message).cel = {
    id: "module_state.unique_module_names"
    expression: "size(this.modules.filter(reference, !this.modules.map(i, i.module_name).exists_one(x, x == reference.module_name))) == 0 ? '' : (this.modules.map(reference, reference.module_name).filter(module_name, !this.modules.map(reference, reference.module_name).exists_one(x, x == module_name)))[0] + ' has appeared multiple times'"
  };
  repeated GlobalStateReference modules = 1;
}

// GlobalReference is a single managed module reference with the latest
// reference from its local array of references.
message GlobalStateReference {
  string module_name = 1 [(buf.validate.field).required = true];
  string latest_reference = 2 [(buf.validate.field).required = true];
}

// ModuleState is an array of references that will be synced to a BSR cluster for a
// managed module. This is kept updated in a state file at the managed module
// directory.
message ModuleState {
  option (buf.validate.message).cel = {
    id: "module_state.unique_references"
    expression: "size(this.references.filter(reference, !this.references.map(i, i.name).exists_one(x, x == reference.name))) == 0 ? '' : (this.references.map(reference, reference.name).filter(name, !this.references.map(reference, reference.name).exists_one(x, x == name)))[0] + ' has appeared multiple times'"
  };
  repeated ModuleReference references = 1;
}

// ModuleReference is a single git reference of a managed module that will be
// synced to a BSR cluster.
message ModuleReference {
  string name = 1 [(buf.validate.field).required = true];
  string digest = 2 [(buf.validate.field).required = true];
}
